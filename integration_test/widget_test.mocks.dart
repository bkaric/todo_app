// Mocks generated by Mockito 5.3.2 from annotations
// in todo_graphql/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:amplify_core/amplify_core.dart' as _i2;
import 'package:amplify_flutter/src/amplify_hub.dart' as _i3;
import 'package:amplify_flutter/src/amplify_impl.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthCategory_0 extends _i1.SmartFake implements _i2.AuthCategory {
  _FakeAuthCategory_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnalyticsCategory_1 extends _i1.SmartFake
    implements _i2.AnalyticsCategory {
  _FakeAnalyticsCategory_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStorageCategory_2 extends _i1.SmartFake
    implements _i2.StorageCategory {
  _FakeStorageCategory_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataStoreCategory_3 extends _i1.SmartFake
    implements _i2.DataStoreCategory {
  _FakeDataStoreCategory_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAPICategory_4 extends _i1.SmartFake implements _i2.APICategory {
  _FakeAPICategory_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAmplifyHub_5 extends _i1.SmartFake implements _i3.AmplifyHub {
  _FakeAmplifyHub_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAmplifyConfig_6 extends _i1.SmartFake implements _i2.AmplifyConfig {
  _FakeAmplifyConfig_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGraphQLResponse_7<T> extends _i1.SmartFake
    implements _i2.GraphQLResponse<T> {
  _FakeGraphQLResponse_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AmplifyClass].
///
/// See the documentation for Mockito's code generation for more information.
class MockAmplifyClass extends _i1.Mock implements _i4.AmplifyClass {
  MockAmplifyClass() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthCategory get Auth => (super.noSuchMethod(
        Invocation.getter(#Auth),
        returnValue: _FakeAuthCategory_0(
          this,
          Invocation.getter(#Auth),
        ),
      ) as _i2.AuthCategory);
  @override
  _i2.AnalyticsCategory get Analytics => (super.noSuchMethod(
        Invocation.getter(#Analytics),
        returnValue: _FakeAnalyticsCategory_1(
          this,
          Invocation.getter(#Analytics),
        ),
      ) as _i2.AnalyticsCategory);
  @override
  _i2.StorageCategory get Storage => (super.noSuchMethod(
        Invocation.getter(#Storage),
        returnValue: _FakeStorageCategory_2(
          this,
          Invocation.getter(#Storage),
        ),
      ) as _i2.StorageCategory);
  @override
  _i2.DataStoreCategory get DataStore => (super.noSuchMethod(
        Invocation.getter(#DataStore),
        returnValue: _FakeDataStoreCategory_3(
          this,
          Invocation.getter(#DataStore),
        ),
      ) as _i2.DataStoreCategory);
  @override
  _i2.APICategory get API => (super.noSuchMethod(
        Invocation.getter(#API),
        returnValue: _FakeAPICategory_4(
          this,
          Invocation.getter(#API),
        ),
      ) as _i2.APICategory);
  @override
  _i3.AmplifyHub get Hub => (super.noSuchMethod(
        Invocation.getter(#Hub),
        returnValue: _FakeAmplifyHub_5(
          this,
          Invocation.getter(#Hub),
        ),
      ) as _i3.AmplifyHub);
  @override
  bool get isConfigured => (super.noSuchMethod(
        Invocation.getter(#isConfigured),
        returnValue: false,
      ) as bool);
  @override
  _i5.Future<_i2.AmplifyConfig> get asyncConfig => (super.noSuchMethod(
        Invocation.getter(#asyncConfig),
        returnValue: _i5.Future<_i2.AmplifyConfig>.value(_FakeAmplifyConfig_6(
          this,
          Invocation.getter(#asyncConfig),
        )),
      ) as _i5.Future<_i2.AmplifyConfig>);
  @override
  String get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: '',
      ) as String);
  @override
  _i5.Future<void> addPlugin(_i2.AmplifyPluginInterface? plugin) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPlugin,
          [plugin],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> addPlugins(List<_i2.AmplifyPluginInterface>? plugins) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPlugins,
          [plugins],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> configure(String? configuration) => (super.noSuchMethod(
        Invocation.method(
          #configure,
          [configuration],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> configurePlatform(String? config) => (super.noSuchMethod(
        Invocation.method(
          #configurePlatform,
          [config],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> reset() => (super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [GraphQLOperation].
///
/// See the documentation for Mockito's code generation for more information.
class MockGraphQLOperation<T> extends _i1.Mock
    implements _i2.GraphQLOperation<T> {
  MockGraphQLOperation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Function get cancel => (super.noSuchMethod(
        Invocation.getter(#cancel),
        returnValue: () {},
      ) as Function);
  @override
  _i5.Future<_i2.GraphQLResponse<T>> get response => (super.noSuchMethod(
        Invocation.getter(#response),
        returnValue:
            _i5.Future<_i2.GraphQLResponse<T>>.value(_FakeGraphQLResponse_7<T>(
          this,
          Invocation.getter(#response),
        )),
      ) as _i5.Future<_i2.GraphQLResponse<T>>);
}

/// A class which mocks [GraphQLRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockGraphQLRequest<T> extends _i1.Mock implements _i2.GraphQLRequest<T> {
  MockGraphQLRequest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
      ) as String);
  @override
  String get document => (super.noSuchMethod(
        Invocation.getter(#document),
        returnValue: '',
      ) as String);
  @override
  Map<String, dynamic> get variables => (super.noSuchMethod(
        Invocation.getter(#variables),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
  @override
  Map<String, dynamic> serializeAsMap() => (super.noSuchMethod(
        Invocation.method(
          #serializeAsMap,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
